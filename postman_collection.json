{
  "info": {
    "name": "Research Paper RAG System API",
    "description": "Complete API collection for testing the Research Paper RAG System with all endpoints including upload, query, paper management, and analytics.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "research-paper-rag"
  },
  "item": [
    {
      "name": "Paper Management",
      "item": [
        {
          "name": "Upload Papers",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "sample_papers/paper_1.pdf",
                  "description": "PDF file to upload (you can select multiple files)"
                }
              ]
            },
            "url": {
              "raw": "http://localhost:8000/api/papers/upload",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "upload"]
            },
            "description": "Upload one or more PDF research papers. The system will extract text, create chunks, generate embeddings, and store in Qdrant and PostgreSQL."
          },
          "response": []
        },
        {
          "name": "List All Papers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers"]
            },
            "description": "Get a list of all uploaded papers with metadata including title, authors, year, filename, pages, and upload date."
          },
          "response": []
        },
        {
          "name": "Get Paper Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/:paper_id",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", ":paper_id"],
              "variable": [
                {
                  "key": "paper_id",
                  "value": "51",
                  "description": "ID of the paper to retrieve"
                }
              ]
            },
            "description": "Get detailed information about a specific paper by its ID."
          },
          "response": []
        },
        {
          "name": "Get Paper Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/:paper_id/stats",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", ":paper_id", "stats"],
              "variable": [
                {
                  "key": "paper_id",
                  "value": "51",
                  "description": "ID of the paper to get statistics for"
                }
              ]
            },
            "description": "Get statistics for a specific paper including number of chunks stored in Qdrant vector database."
          },
          "response": []
        },
        {
          "name": "Delete Paper",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/:paper_id",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", ":paper_id"],
              "variable": [
                {
                  "key": "paper_id",
                  "value": "51",
                  "description": "ID of the paper to delete"
                }
              ]
            },
            "description": "Delete a paper and all its associated vectors from Qdrant. This operation cannot be undone."
          },
          "response": []
        }
      ],
      "description": "Endpoints for managing research papers - upload, list, view details, get stats, and delete."
    },
    {
      "name": "Query System",
      "item": [
        {
          "name": "Query (Standard JSON Response)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is blockchain sustainability?\",\n  \"top_k\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "Query the RAG system and get JSON response with answer, citations, sources, and confidence. This matches the Task Instructions specification."
          },
          "response": []
        },
        {
          "name": "Query Specific Papers (JSON)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What methodology was used in the transformer paper?\",\n  \"top_k\": 3,\n  \"paper_ids\": [1, 3]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "Query specific papers by providing paper_ids array. This limits the search to only the specified papers."
          },
          "response": []
        },
        {
          "name": "Query with Streaming (Bonus Feature)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "text/event-stream"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is blockchain sustainability?\",\n  \"top_k\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query/stream",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query", "stream"]
            },
            "description": "Query the RAG system with Server-Sent Events (SSE) streaming for real-time word-by-word responses. This is a bonus feature used by the web UI. Note: Postman may not display SSE streams correctly - use curl with -N flag or the web UI for best experience."
          },
          "response": []
        }
      ],
      "description": "Intelligent query system with RAG pipeline, vector search, and LLM generation. Includes both standard JSON responses and streaming SSE responses."
    },
    {
      "name": "Query History & Analytics",
      "item": [
        {
          "name": "Get Query History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/queries/history?limit=20",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "queries", "history"],
              "query": [
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of recent queries to retrieve (default: 20)"
                }
              ]
            },
            "description": "Retrieve recent query history with question, response time, confidence score, and referenced paper IDs."
          },
          "response": []
        },
        {
          "name": "Get Popular Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/analytics/popular?limit=10",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "analytics", "popular"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of top topics to retrieve (default: 10)"
                }
              ]
            },
            "description": "Get most frequently queried topics based on keyword extraction from recent queries. Useful for understanding user interests and trends."
          },
          "response": []
        }
      ],
      "description": "Analytics endpoints for tracking query history and popular topics."
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": [""]
            },
            "description": "Basic health check endpoint. Returns welcome message and API status."
          },
          "response": []
        },
        {
          "name": "API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", ""]
            },
            "description": "API-specific health check endpoint."
          },
          "response": []
        }
      ],
      "description": "Health check endpoints to verify the API is running."
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Upload Invalid File Type",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "README.md",
                  "description": "Non-PDF file to test error handling"
                }
              ]
            },
            "url": {
              "raw": "http://localhost:8000/api/papers/upload",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "upload"]
            },
            "description": "Test error handling by uploading a non-PDF file. Should return 422 with clear error message."
          },
          "response": []
        },
        {
          "name": "Query with Empty Question",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"\",\n  \"top_k\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "Test error handling with empty question. Should return validation error."
          },
          "response": []
        },
        {
          "name": "Get Non-existent Paper",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/99999",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "99999"]
            },
            "description": "Test error handling by requesting a non-existent paper ID. Should return 404."
          },
          "response": []
        },
        {
          "name": "Delete Non-existent Paper",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/99999",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "99999"]
            },
            "description": "Test error handling by deleting a non-existent paper. Should return 404."
          },
          "response": []
        }
      ],
      "description": "Test cases for error handling and validation across different endpoints."
    },
    {
      "name": "Provided Test Queries (20)",
      "item": [
        {
          "name": "Q1: Main goal of 'Attention is All You Need'",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is the main goal of the paper 'Attention is All You Need'?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "{{base_url}}{{api_prefix}}/query",
              "host": ["{{base_url}}"],
              "path": ["{{api_prefix}}","query"]
            },
            "description": "expected_papers: paper3_nlp_transformers.pdf | difficulty: easy | type: single-paper"
          },
          "event": [
            {"listen": "test", "script": {"exec": [
              "const resp = pm.response.json();",
              "pm.test('Has answer', () => typeof resp.answer === 'string');",
              "const expected = ['paper3_nlp_transformers.pdf'];",
              "pm.test('Includes expected sources', () => (resp.sources_used||[]).some(s=>expected.includes(s)));"
            ], "type": "text/javascript"}}
          ]
        },
        {
          "name": "Q2: Activation functions in neural networks",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Which activation functions are commonly used in neural network architectures?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper2_neural_networks.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper2_neural_networks.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q3: Datasets for evaluating CV models",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"What datasets are used to evaluate computer vision models in the provided papers?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper4_computer_vision.pdf | difficulty: medium | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper4_computer_vision.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q4: CNNs vs Transformers for image recognition",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Compare the performance of CNNs and Transformers for image recognition tasks.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper3_nlp_transformers.pdf, paper4_computer_vision.pdf | difficulty: medium | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper3_nlp_transformers.pdf','paper4_computer_vision.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q5: Optimization algorithms across ML and DL",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Which optimization algorithms are discussed across the machine learning and deep learning papers?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper1_machine_learning.pdf, paper2_neural_networks.pdf | difficulty: medium | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper1_machine_learning.pdf','paper2_neural_networks.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q6: RL applied to decision-making",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"How is reinforcement learning applied to decision-making problems?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper5_reinforcement_learning.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper5_reinforcement_learning.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q7: Summarize transformer methodology",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Summarize the methodology of the transformer model.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper3_nlp_transformers.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper3_nlp_transformers.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q8: Challenges in training deep neural networks",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"What are the major challenges in training deep neural networks?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper2_neural_networks.pdf | difficulty: medium | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper2_neural_networks.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q9: Paper introducing attention mechanisms",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Which paper introduces attention mechanisms, and how do they improve performance?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper3_nlp_transformers.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper3_nlp_transformers.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q10: Classical ML vs Deep Learning",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"How do classical machine learning methods differ from deep learning approaches?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper1_machine_learning.pdf, paper2_neural_networks.pdf | difficulty: medium | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper1_machine_learning.pdf','paper2_neural_networks.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q11: RL benchmarks",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"List the benchmarks used to evaluate reinforcement learning algorithms.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper5_reinforcement_learning.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper5_reinforcement_learning.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q12: Loss functions across architectures",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"What loss functions are used across different neural architectures?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper2_neural_networks.pdf, paper4_computer_vision.pdf | difficulty: medium | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper2_neural_networks.pdf','paper4_computer_vision.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q13: How CNNs extract features",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Explain how convolutional neural networks extract features from images.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper4_computer_vision.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper4_computer_vision.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q14: RL reward optimization process",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Describe the reinforcement learning reward optimization process.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper5_reinforcement_learning.pdf | difficulty: easy | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper5_reinforcement_learning.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q15: Transfer learning across domains",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"How can transfer learning be applied across different deep learning domains?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper2_neural_networks.pdf, paper4_computer_vision.pdf | difficulty: medium | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper2_neural_networks.pdf','paper4_computer_vision.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q16: Training efficiency of gradient descent methods",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Compare the training efficiency of gradient descent methods across all papers.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper1_machine_learning.pdf, paper2_neural_networks.pdf, paper5_reinforcement_learning.pdf | difficulty: hard | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper1_machine_learning.pdf','paper2_neural_networks.pdf','paper5_reinforcement_learning.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q17: Highest generalization capability",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Which architectures demonstrated the highest generalization capability?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper2_neural_networks.pdf, paper3_nlp_transformers.pdf, paper4_computer_vision.pdf | difficulty: hard | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper2_neural_networks.pdf','paper3_nlp_transformers.pdf','paper4_computer_vision.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q18: Future research directions in RL",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"What are the future research directions suggested by the reinforcement learning paper?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper5_reinforcement_learning.pdf | difficulty: medium | type: single-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper5_reinforcement_learning.pdf'];","pm.test('Includes expected sources',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q19: Combine attention with convolution",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"Discuss how attention mechanisms can be combined with convolutional layers.\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper3_nlp_transformers.pdf, paper4_computer_vision.pdf | difficulty: hard | type: multi-paper"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper3_nlp_transformers.pdf','paper4_computer_vision.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        },
        {
          "name": "Q20: Ethical considerations across all papers",
          "request": {"method": "POST","header": [{"key":"Content-Type","value":"application/json"}],"body": {"mode":"raw","raw": "{\n  \"question\": \"What are the ethical considerations mentioned across all papers?\",\n  \"top_k\": 5\n}"},"url": {"raw": "{{base_url}}{{api_prefix}}/query","host":["{{base_url}}"],"path":["{{api_prefix}}","query"]},"description":"expected_papers: paper1_machine_learning.pdf, paper2_neural_networks.pdf, paper3_nlp_transformers.pdf, paper4_computer_vision.pdf, paper5_reinforcement_learning.pdf | difficulty: hard | type: cross-domain"},
          "event": [{"listen":"test","script":{"exec":["const r=pm.response.json();","const exp=['paper1_machine_learning.pdf','paper2_neural_networks.pdf','paper3_nlp_transformers.pdf','paper4_computer_vision.pdf','paper5_reinforcement_learning.pdf'];","pm.test('Includes at least one expected source',()=> (r.sources_used||[]).some(s=>exp.includes(s)));"],"type":"text/javascript"}}]
        }
      ],
      "description": "20 assessment queries mapped to the provided sample_papers. Each request includes a test that checks sources_used contains at least one expected paper filename."
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "api_prefix",
      "value": "/api",
      "type": "string"
    }
  ]
}
