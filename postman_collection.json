{
  "info": {
    "name": "Research Paper RAG System API",
    "description": "Complete API collection for testing the Research Paper RAG System with all endpoints including upload, query, paper management, and analytics.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "research-paper-rag"
  },
  "item": [
    {
      "name": "Paper Management",
      "item": [
        {
          "name": "Upload Papers",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "sample_papers/paper_1.pdf",
                  "description": "PDF file to upload (you can select multiple files)"
                }
              ]
            },
            "url": {
              "raw": "http://localhost:8000/api/papers/upload",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "upload"]
            },
            "description": "Upload one or more PDF research papers. The system will extract text, create chunks, generate embeddings, and store in Qdrant and PostgreSQL."
          },
          "response": []
        },
        {
          "name": "List All Papers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers"]
            },
            "description": "Get a list of all uploaded papers with metadata including title, authors, year, filename, pages, and upload date."
          },
          "response": []
        },
        {
          "name": "Get Paper Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/:paper_id",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", ":paper_id"],
              "variable": [
                {
                  "key": "paper_id",
                  "value": "51",
                  "description": "ID of the paper to retrieve"
                }
              ]
            },
            "description": "Get detailed information about a specific paper by its ID."
          },
          "response": []
        },
        {
          "name": "Get Paper Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/:paper_id/stats",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", ":paper_id", "stats"],
              "variable": [
                {
                  "key": "paper_id",
                  "value": "51",
                  "description": "ID of the paper to get statistics for"
                }
              ]
            },
            "description": "Get statistics for a specific paper including number of chunks stored in Qdrant vector database."
          },
          "response": []
        },
        {
          "name": "Delete Paper",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/:paper_id",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", ":paper_id"],
              "variable": [
                {
                  "key": "paper_id",
                  "value": "51",
                  "description": "ID of the paper to delete"
                }
              ]
            },
            "description": "Delete a paper and all its associated vectors from Qdrant. This operation cannot be undone."
          },
          "response": []
        }
      ],
      "description": "Endpoints for managing research papers - upload, list, view details, get stats, and delete."
    },
    {
      "name": "Query System",
      "item": [
        {
          "name": "Query (Standard JSON Response)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is blockchain sustainability?\",\n  \"top_k\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "Query the RAG system and get JSON response with answer, citations, sources, and confidence. This matches the Task Instructions specification."
          },
          "response": []
        },
        {
          "name": "Query Specific Papers (JSON)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What methodology was used in the transformer paper?\",\n  \"top_k\": 3,\n  \"paper_ids\": [1, 3]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "Query specific papers by providing paper_ids array. This limits the search to only the specified papers."
          },
          "response": []
        },
        {
          "name": "Query with Streaming (Bonus Feature)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "text/event-stream"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is blockchain sustainability?\",\n  \"top_k\": 5\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query/stream",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query", "stream"]
            },
            "description": "Query the RAG system with Server-Sent Events (SSE) streaming for real-time word-by-word responses. This is a bonus feature used by the web UI. Note: Postman may not display SSE streams correctly - use curl with -N flag or the web UI for best experience."
          },
          "response": []
        }
      ],
      "description": "Intelligent query system with RAG pipeline, vector search, and LLM generation. Includes both standard JSON responses and streaming SSE responses."
    },
    {
      "name": "Query History & Analytics",
      "item": [
        {
          "name": "Get Query History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/queries/history?limit=20",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "queries", "history"],
              "query": [
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of recent queries to retrieve (default: 20)"
                }
              ]
            },
            "description": "Retrieve recent query history with question, response time, confidence score, and referenced paper IDs."
          },
          "response": []
        },
        {
          "name": "Get Popular Topics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/analytics/popular?limit=10",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "analytics", "popular"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of top topics to retrieve (default: 10)"
                }
              ]
            },
            "description": "Get most frequently queried topics based on keyword extraction from recent queries. Useful for understanding user interests and trends."
          },
          "response": []
        }
      ],
      "description": "Analytics endpoints for tracking query history and popular topics."
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": [""]
            },
            "description": "Basic health check endpoint. Returns welcome message and API status."
          },
          "response": []
        },
        {
          "name": "API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", ""]
            },
            "description": "API-specific health check endpoint."
          },
          "response": []
        }
      ],
      "description": "Health check endpoints to verify the API is running."
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Upload Invalid File Type",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "README.md",
                  "description": "Non-PDF file to test error handling"
                }
              ]
            },
            "url": {
              "raw": "http://localhost:8000/api/papers/upload",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "upload"]
            },
            "description": "Test error handling by uploading a non-PDF file. Should return 422 with clear error message."
          },
          "response": []
        },
        {
          "name": "Query with Empty Question",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"\",\n  \"top_k\": 3\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "Test error handling with empty question. Should return validation error."
          },
          "response": []
        },
        {
          "name": "Get Non-existent Paper",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/99999",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "99999"]
            },
            "description": "Test error handling by requesting a non-existent paper ID. Should return 404."
          },
          "response": []
        },
        {
          "name": "Delete Non-existent Paper",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "http://localhost:8000/api/papers/99999",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "papers", "99999"]
            },
            "description": "Test error handling by deleting a non-existent paper. Should return 404."
          },
          "response": []
        }
      ],
      "description": "Test cases for error handling and validation across different endpoints."
    },
    {
      "name": "Sample Test Queries (All 20 from test_queries.json)",
      "item": [
        {
          "name": "Easy 1 - What is machine learning?",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is machine learning?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 1 | Easy | factual - Basic definition query"
          },
          "response": []
        },
        {
          "name": "Easy 2 - Main types of neural networks",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What are the main types of neural networks?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 2 | Easy | factual - Simple enumeration query"
          },
          "response": []
        },
        {
          "name": "Easy 3 - Define natural language processing",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Define natural language processing.\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 3 | Easy | definition - Definition query"
          },
          "response": []
        },
        {
          "name": "Easy 4 - Purpose of backpropagation",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What is the purpose of backpropagation?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 4 | Easy | factual - Single concept explanation"
          },
          "response": []
        },
        {
          "name": "Easy 5 - Who introduced deep learning",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Who introduced the concept of deep learning?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 18 | Easy | history - Historical query"
          },
          "response": []
        },
        {
          "name": "Medium 1 - Compare supervised vs unsupervised learning",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Compare supervised and unsupervised learning approaches.\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 5 | Medium | comparison - Multi-concept synthesis"
          },
          "response": []
        },
        {
          "name": "Medium 2 - Transformers improve upon RNNs",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"How do transformers improve upon traditional RNN architectures?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 6 | Medium | methodology - Methodological comparison"
          },
          "response": []
        },
        {
          "name": "Medium 3 - Computer vision in healthcare",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What are the common applications of computer vision in healthcare?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 7 | Medium | application - Domain-specific query"
          },
          "response": []
        },
        {
          "name": "Medium 4 - Training process for deep neural networks",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Describe the training process for deep neural networks.\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 8 | Medium | process - Process explanation"
          },
          "response": []
        },
        {
          "name": "Medium 5 - Vanishing gradient problem techniques",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What techniques can address the vanishing gradient problem?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 9 | Medium | problem-solving - Problem-solution query"
          },
          "response": []
        },
        {
          "name": "Medium 6 - Advantages of attention mechanisms",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What are the advantages of using attention mechanisms?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 10 | Medium | advantages - Benefit enumeration"
          },
          "response": []
        },
        {
          "name": "Medium 7 - Dropout prevent overfitting",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"How does dropout prevent overfitting in neural networks?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 17 | Medium | specific-technique - Mechanistic understanding"
          },
          "response": []
        },
        {
          "name": "Medium 8 - Text preprocessing for NLP",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What preprocessing steps are typically required for text data before feeding it to NLP models?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 20 | Medium | data-preprocessing - Data pipeline query"
          },
          "response": []
        },
        {
          "name": "Hard 1 - BERT and transfer learning",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"How do pre-trained language models like BERT leverage transfer learning, and what makes them effective for downstream tasks?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 11 | Hard | multi-hop - Multi-hop reasoning"
          },
          "response": []
        },
        {
          "name": "Hard 2 - Overfitting, regularization, generalization",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain the relationship between overfitting, regularization techniques, and model generalization.\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 12 | Hard | synthesis - Conceptual synthesis"
          },
          "response": []
        },
        {
          "name": "Hard 3 - Model accuracy vs efficiency trade-offs",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What are the trade-offs between model accuracy and computational efficiency in deep learning?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 13 | Hard | comparative-analysis - Trade-off analysis"
          },
          "response": []
        },
        {
          "name": "Hard 4 - Evaluate reinforcement learning agent",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"How should one evaluate the performance of a reinforcement learning agent in a complex environment?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 14 | Hard | evaluation - Evaluation methodology"
          },
          "response": []
        },
        {
          "name": "Hard 5 - CNNs vs Vision Transformers",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Compare the architectural differences between CNNs and Vision Transformers, and explain when each is more suitable.\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 15 | Hard | architectural - Deep architectural comparison"
          },
          "response": []
        },
        {
          "name": "Hard 6 - Ethical concerns about bias in AI",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"What are the main ethical concerns related to bias in AI models, and how can they be mitigated?\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 16 | Hard | ethical - Ethical considerations"
          },
          "response": []
        },
        {
          "name": "Hard 7 - Adam optimizer vs SGD",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"question\": \"Explain how Adam optimizer adapts learning rates and why it's preferred over SGD in many scenarios.\",\n  \"top_k\": 5\n}",
              "options": {"raw": {"language": "json"}}
            },
            "url": {
              "raw": "http://localhost:8000/api/query",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8000",
              "path": ["api", "query"]
            },
            "description": "ID 19 | Hard | optimization - Optimization algorithm analysis"
          },
          "response": []
        }
      ],
      "description": "All 20 test queries from test_queries.json: 5 easy, 8 medium, 7 hard. Covers factual, comparison, multi-hop reasoning, ethical, and optimization queries across various AI/ML topics."
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "api_prefix",
      "value": "/api",
      "type": "string"
    }
  ]
}
